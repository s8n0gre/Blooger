'use strict';

const argv = require('yargs').argv;
const fs = require('fs');
const path = require('path');
const http2 = require('http2');
const r = require('./response');

const docRoot = argv._.length
  ? path.join(process.cwd(), argv._[0])
  : path.join(process.cwd(), '.');
const port = argv.port || 3000;
const keyPath = argv.key || path.join(__dirname, '/localhost.key');
const key = fs.readFileSync(keyPath);
const certPath = argv.cert || path.join(__dirname, '/localhost.crt')
const cert = fs.readFileSync(certPath);

// const manifestPath = argv.manifest;
// const manifest = manifestPath
//   ? JSON.parse(fs.readFileSync(path.join(process.cwd(), manifestPath)))
//   : {};

function assetExists(docroot, asset) {
  try {
    const stat = fs.statSync(path.join(docRoot, asset));
    return stat.isFile();
  } catch (err) {
    return false;
  }
}

const server = http2.createServer({
  key,
  cert,
}, (request, response) => {
  let asset = null;
  if (assetExists(docRoot, request.url)) {
    asset = request.url;
  } else if (assetExists(docRoot, `${request.url}index.html`)) {
    asset = `${request.url}index.html`;
  }

  if (!asset) {
    console.log(404, request.url);
    response.writeHead(404);
    return response.end();
  }
  console.log(200, asset);
  response.writeHead(200);
  response.end(fs.readFileSync(path.join(docRoot, asset)));
});

server.listen(port, () => {
  process.stdout.write(`h2 server started at ${port}\n`);
  process.stdout.write(`Serving ${docRoot}\n`);
});
